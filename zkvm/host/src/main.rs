// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    COMPETITION_ELF, COMPETITION_ID
};
use risc0_zkvm::{get_prover_server, ExecutorEnv, ProverOpts};
use sha2::{Sha256, Digest as _};
use risc0_zkvm::sha::{Digest, Digestible};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let now = std::time::Instant::now();

    let input = [1u8; 32];
    let mut hasher = Sha256::new();
    hasher.update(&input);
    let hash = hasher.finalize().to_vec();

    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    let prover = get_prover_server(&ProverOpts::succinct()).unwrap();
    // let prover = get_prover_server(&ProverOpts::groth16()).unwrap();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, COMPETITION_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    let proof = vec![0u8; 1];
    // let proof = receipt.inner.groth16().unwrap().seal;

    // For example:
    let output: Vec<u8> = receipt.journal.decode().unwrap();
    let output1: Digest = receipt.journal.digest();

    let mut encode_hash = (hash.len() as u32).to_le_bytes().to_vec();
    for i in hash.iter() {
        encode_hash.extend((*i as u32).to_le_bytes().to_vec());
    }
    let mut hasher1 = Sha256::new();
    hasher1.update(&encode_hash);
    let hash1 = hasher1.finalize().to_vec();

    let image_id: Digest = COMPETITION_ID.into();

    let mut id: Vec<u8> = vec![];
    for i in COMPETITION_ID {
        id.extend(i.to_le_bytes());
    }

    println!("output  : {}", hex::encode(&hash));
    println!("output  : {}", hex::encode(&output));

    println!("digest : {}", hex::encode(&hash1));
    println!("digest : {}", output1);

    println!("id0     : {}", hex::encode(&id));
    println!("id1     : {}", image_id);

    println!("proof   : {}", hex::encode(&proof));

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(COMPETITION_ID)
        .unwrap();

    println!("prove time: {}s", now.elapsed().as_secs());
}
